### Quick notes
# Connect to server 
ssh lindsayv@frinkiac.soest.hawaii.edu
pwd
ls

# Check cluster queue
qstat

# Delete a job
qdel JOBID#

# Create file
nano name

# Copy file from one location to another
cp fileToCopyFromPWD /share/frinkraid2/lindsayv/folderToCopyInto
cp /path/fileToCopy /share/frinkraid2/lindsayv/folderToCopyInto

# Copy file from local to ssh
scp /home/lindsay/Downloads/ROMS_Kaneohe.nc lindsayv@frinkiac.soest.hawaii.edu:/share/frinkraid2/lindsayv

# Delete file
rm /path/fileToDel

# Make dir
mkdir name

# Copy folder
cp - r /path/fileToCopy /share/frinkraid2/lindsayv/folderToCopyInto

# Delete dir
rmdir name
rm -r name # if not empty

# Move file or folder
mv oldPath newPath

# List from most to least recent all files with starting name of fwd
ls -lt fwd* 

# Delete multiple files with same start of name
rm -f hioekg-* 

###### Qs for Brian ######
# Confirm that spinup.sh can overwrite other specifications
# When do we use rmake- when we edit ocean.in? And..?
# In ocean.in:

#! Time-stamp assigned for model initialization, reference time
#! origin for tidal forcing, and model reference time for output
#! NetCDF units attribute.

#      DSTART =  6744.0d0                      ! days
#  TIDE_START =  6575.0d0                      ! days 

# I have a note that states that TIDE_START is an arbitrary day- can we discuss? 
# Review running the model, nesting, and timeline
# Update on M McManus work?
# Asking Lisa for help re coupling

########### ROMS workflow ###########
# See documentation on myroms.org

pwd # check wd
ssh frinkiac  # connect to cluster on Linux 
# ssh -Y lindsayv@frinkiac.soest.hawaii.edu # connect to cluster on Windows laptop
ls # check files

### This is a walkthrough of my tutorial with B & T 8/16 ###
# ls /share/frinkraid/powellb/pacioos  # BP's dir
# cp -r /share/frinkraid/powellb/pacioos/hioekg-template .  # copy this folder to my dir
# mkdir roms
cd ./roms  # The ./folder notation abbreviates my typing
# git clone ~powellb/roms/src  # Cloned BP's repo
cd ./src
git pull  # Updates /roms/src
cd /share/frinkraid2/lindsayv/

# ls  # There are several items here:
	# 1. nc_config: tells Fortran compiler where things are located
	# 2. ocean.in: sets all parameters. At the bottom there are glossary terms, as needed if I don't know what a variable does
	# 3. include/ : used for code customization; Fortran code
	# 4. roms_config.sh: compiles code; rmake loads it
	# 5. hioekg.h: what parts of the code are being used. "rmake clean", then "rmake -j 2": Will generate oceanM* file- this is what I submit to the queue. This is a wrapper for 'make'; it loads the roms_config.sh file
	# 6. spinup.sh (the definitions in this file will override other options):

ROMS_RUN_NAME="HIOEKG Testing"
ROMS_EXEC=${PBS_O_WORKDIR}/oceanM  # WORKDIR is the queue
ROMS_INPUT=${PBS_O_WORKDIR}/ocean.in  # Which input file to use?
ROMS_FAIL_INPUT=${PBS_O_WORKDIR}/ocean-fail.in  # I set this to 0 per BP's request
ROMS_START_DAY=6744 
ROMS_END_DAY=6751
ROMS_WORK_DIR=${PBS_O_WORKDIR}/work
ROMS_OUT_DIR=${PBS_O_WORKDIR}/output  # Where it's putting the files; it has to wipe the other dir and prep for next run
ROMS_RUN_DAYS=7 
ROMS_EPOCH=2000 
ROMS_EPOCH_YEARDAY=0
ROMS_QUEUE="nodes=4:ppn=16"  # It uses all the processors on a given node
ROMS_QUEUE_NAME="F1" 
ROMS_USE_RESTART=1  # Almost always leave it at 1. When it goes to the next cycle, it will look for a restart file. This is generated when the cycle ends. It's the same as a history file, but it saves for information. 
ROMS_PRE_SCRIPT=  # This and the next can be important. Here, we may not have a valid .nc for each cycle. This allows us to load a different file for some runs if needed.
ROMS_POST_SCRIPT=  # May need to do some post processing before starting next file. Rarely used.
ROMS_POST_BACKGROUND_SCRIPT=  # Run when cycle ends. Submitted to the queue independently. i.e., we have a script to generate a statistic about the cycle while the new cycle runs (likely not going to use).


### ocean.in notes:

# VARNAME in ocean.in should be set to a specific dir if it isn't in the hioekg-template dir.

# If we update a file, go into the hioekg-template dir and then type rmake. It will recompile.

# The grid has 188 in the I direction, 88 in the J direction. I is divided into 8 sections, and J is divided into 8 sections.

## Time-Stepping parameters:
	# NTIMES == 720 # never touch this
        # DT == 10.0d0 # largest possible value to use that keeps the model stable. this is the baroclinic timestep. Brian said "this seems low" and he would put it higher
        # NDTFAST == 44 # barotopic mode- how many times do you want to run the barotopic mode for every one timestep in DT? here, this is a 10/44 sec = one quarter second timestep for the barotropic. Brian said "this seems really high"

# Once we get the model running, can we increase DT and increase NDTFAST?

# We can compute NDTFAST = sqrt(gH). We have both g and H. 


## Output history, quicksave, average, and diagnostic files parameters.
	# NHIS == 360  # This says every 3600 seconds (we have a 10 sec timestep), we save a snapshot of the model. We care more about historys than avgs.
 	# NAVG == 8640 # * 10 sec timestep = we get avgs every 86400 sec, or each day. Cumulative avgs.


## Harmonic/biharmonic horizontal diffusion of tracer for nonlinear model and adjoint-based algorithms: [1:NAT+NPT,Ngrids]:

        # TNU2 == 35.0d0  35.0d0                    ! m2/s # Brian says seems high 

## Harmonic/biharmonic, horizontal viscosity coefficient for nonlinear model:

        # VISC2 == 50.0d0                           ! m2/s # "Seems high"


## Logical switches (TRUE/FALSE) to increase/decrease horizontal viscosity: precludes boundary issue problems...just leave alone, but here it is:

	# LuvSponge == F                                 ! horizontal momentum
	# LtracerSponge == F F                           ! temperature, salinity, inert


## Vertical S-coordinates parameters (see below for details), [1:Ngrids]:

     # THETA_S == 7.0d0                ! surface stretching parameter 
     # THETA_B == 0.5d0                ! bottom  stretching parameter
     # TCLINE == 25.0d0                ! critical depth (m) # so upper 25 m is surface

## Time-stamp assigned for model initialization, reference time origin for tidal forcing, and model reference time for output NetCDF units attribute:

	# DSTART =  6744.0d0           # the day number you want the model to start on. "I want to start 6744 days from TIME_REF"
	# TIDE_START =  6575.0d0       # we need a file that tells us about the amplitude and phase of the tides. We say, ok, I'll set all my phases relative to day 6575 (arbitrary day)

# This is all for having a point source (in our case, rivers):

## Logical switches (TRUE/FALSE) to activate horizontal momentum transport point Sources/Sinks (like river runoff transport) and mass point Sources/Sinks (like volume vertical influx), [1:Ngrids].

        # LuvSrc == T                         ! horizontal momentum transport
        # LwSrc == F                          ! volume vertical influx
	# LtracerSrc == F T                   ! temperature, salinity, inert # tells model that I am loading a file with salinity and velocity data


# We might want to think about this at some point...

## Logical switches (TRUE/FALSE) to activate writing of fields into HISTORY output file.
```
Hout(idUvel) == T       ! u                  3D U-velocity
Hout(idVvel) == T       ! v                  3D V-velocity
Hout(idu3dE) == F       ! u_eastward         3D U-eastward  at RHO-points
Hout(idv3dN) == F       ! v_northward        3D V-northward at RHO-points
Hout(idWvel) == T       ! w                  3D W-velocity
Hout(idOvel) == T       ! omega              omega vertical velocity
Hout(idUbar) == T       ! ubar               2D U-velocity
Hout(idVbar) == T       ! vbar               2D V-velocity
Hout(idu2dE) == F       ! ubar_eastward      2D U-eastward  at RHO-points
Hout(idv2dN) == F       ! vbar_northward     2D V-northward at RHO-points
Hout(idFsur) == T       ! zeta               free-surface
Hout(idBath) == F       ! bath               time-dependent bathymetry

Hout(idTvar) == T T     ! temp, salt         temperature and salinity

Hout(idpthR) == F       ! z_rho              time-varying depths of RHO-points
Hout(idpthU) == F       ! z_u                time-varying depths of U-points
Hout(idpthV) == F       ! z_v                time-varying depths of V-points
Hout(idpthW) == F       ! z_w                time-varying depths of W-points

Hout(idUsms) == F       ! sustr              surface U-stress

# BP says "I would turn off some of these ^ things, like w and omega"

# Always save the prognostic (needed) variables: zeta, ubar, vbar, u, v, temp, salt 
```

### "Here's the important stuff...heavy lifting"

## Input NetCDF file names, [1:Ngrids].

     # GRDNAME == /share/frinkraid2/dalep3/pacioos/hioekg-nlm-waves/hioekg-grid.nc  # defines lat, long, bty etc. Can use python or ncview to examine.
     # ININAME == ini.nc # Initial conditions to run with
   

## Input lateral boundary conditions and climatology file names

     # BRYNAME == /share/frinkraid2/dalep3/pacioos/hioekg-nlm-waves/hioekg-bry.nc  # boundary conditions
     # CLMNAME == /share/frinkraid2/dalep3/pacioos/hioekg-nlm-waves/hioekg-clim.nc  # climatology (seapy auto generates this; 'this is what the outer model says for your grid'); keeps the model from deviating from the climatology, but not needed (not turned on currently)


## Input climatology nudging coefficients file name.

     # NUDNAME == ocean_nud.nc # what is the timescale to restore toward climatology (larger = looser)


## Output NetCDF file names, [1:Ngrids]. # not everything in the list below will be created

	# BPARNAM =  bio_Fennel.in # this will be the cobalt.in file (Lisa has done this)

################## Running the model on frinkiac #################

# Run the model on as many processors as possible
# In Brian's cluster, we have default (15 nodes, 8 cores each) & F1 (4 nodes, 16 cores each; a little faster as it's newer)

# On the queue, cmd line, we care about 3 commands:

# 1. qstat # tells us what is running
# 2. qdel [a number] # deletes job [a number] frpom the queue, if you've made an error
# 3. qexec -N [name that appears in cluster] - P [number of cores] - Q [default or F1]  python myscript.py # Usually P and Q are not noted. Here, "python myscript.py" is just any sort of Unix-based command for anything.

# There are 2 ways to run something. The most common way is to use cycle_roms. A second way is to use a script called romsexec. 
	# 1. cycle_roms: lets multiple people use the queue
		# I can set a cycle to run for 30 days, then once that timestep is completed, it sets up for the next 30 days and gets in line again
		# To use cycle_roms, type "cycle_roms spinup.sh" ...then we check the queue now and again to see how it's doing

	# 2. romsexec -h tells me my options...
 		# -e executable [oceanM]
 		# -i input [ocean.in]
 		# -n name [ROMSEXEC]
 		# -q queue name [default]
 		# -w {wait} [off]
 		# -s {silent} [off] 

# If I use romsexec, my ocean.in better be set up perfectly. cycle_roms is a little easier- it figures out things for you, like boundary conditions, forcings..

### Ending practice: didn't end up working, but here it is: 

# mkdir output # Create output dir for model
# cd /share/frinkraid2/lindsayv/hioekg-template/output 
# cp /share/frinkraid2/dalep3/pacioos/hioekg-nlm-waves/ini.nc # Copied Dale's files into this dir
# cd /share/frinkraid2/lindsayv/hioekg-template/ # nav out

## Here is the command to do a dry run:
# cycle_roms -d spinup.sh 

# varinfo.dat, oceanM*, build are created by rmake command 

##########################################
# 8/28-9 notes 

# Copied TF hinig-nlm-template dir; he modified some bugs. Model is running.
# In /nest, 2 py scripts:
	# setup_inner_nest.py: IMPORTANT. Takes outer model --> interpolates to smaller grid. seapy is called.
	# setup_inner_frc.py: not needed for Kaneohe. When we run the assimilation, this script generates new atmospheric forcing so the model better matches observations.

# Don't change ocean.in

# Turn timestep way down to make it more stable. BP says "if it runs for 10 days, it will run"

# The run log in /work tells me about the model run

# Use ncview to check how things have gone- are any variables wonky?

# "Something seems wrong with the forcing file" - temp, salinity outputs are crazy

qexec P4 python setup_inner_nest.py # BP says, change the dates in this script to process a single file just to get it going

# "If you want to get ambitious" ...modify this ^ for hioekg.h (Kaneohe) (30-60 day run)


################

cd /share/frinkraid2/lindsayv/hioekg-template/ncfiles

cp /share/frinkraid2/dalep3/pacioos/kaneohe_bay/hioekg-nlm-test/hioekg-grid.nc .
cp /share/frinkraid2/dalep3/pacioos/kaneohe_bay/hioekg-nlm-test/tide.nc .
cp /share/frinkraid2/dalep3/pacioos/kaneohe_bay/hioekg-nlm-test/hioekg-frc.nc .
cp /share/frinkraid2/dalep3/pacioos/kaneohe_bay/hioekg-nlm-test/hioekg-clim.nc .
cp /share/frinkraid2/dalep3/pacioos/kaneohe_bay/hioekg-nlm-test/hioekg-bry.nc .
cp /share/frinkraid2/dalep3/pacioos/kaneohe_bay/hioekg-nlm-test/ini.nc .

################

## NOTE: Lisa says that generating a new clim file is unnecessary as long as the ini.nc works. Leaving these notes here anyway..
# I think I need to generate a new clim file for this one day using /share/frinkraid2/dalep3/pacioos/clim/make_clim.py

import seapy
import numpy as np
import os
import datetime

seapy.roms.interp.to_clim("/share/frinkraid2/dalep3/pacioos/kaneohe_bay/hioekg-nlm-test/hioekg_his_0001.nc", "/share/frinkraid2/lindsayv/hioekg-template/ncfiles/hioekg-clim.nc",
                          "/share/frinkraid2/lindsayv/hioekg-template/ncfiles", nx=3.0 / 12., ny=3 / 12, threads=4,records=np.arange(192,222))

#### Attempting to run the nest script...

qexec python setup_inner_nest.py # qexec P4 etc...does not work, weirdly

## The script requires:

# hiig-grid.nc (outer)
# hioekg-grid.nc (inner)
# ini.nc or specified clim file (at end of script); ini.nc or clim_*.nc must align with the fwd_001_*.nc files, which will not be a problem since clim_*.nc is produced by this routine)

## The script produces:
# hioekg_clim_*.nc
# hioekg_bry_*.nc
# hioekg_bry.nc
# fwd_001_*_hioekg-grid_pmap.npz (here the wildcard specifies the starting day)
# hioekg_tide.nc

# On 9/7, script ran for timestep 3072 - 3132 (late May - late July 2008)
# Success. 

# Note that also on 9/7, setup_inner_frc (not needed for Kaneohe) was also tested. Chunk-by-chunk troubleshooting produced some odd, possibly indentation-related errors, but sending it straight to the cluster was successful.






