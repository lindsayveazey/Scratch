128.171.156.147


# START PYTHON: 
/usr/bin/env python
# or
python
# better:
ipython

# Setting up remote access to Jupyter on the frinkraid

# ssh in, then:
cd ./jupyter
nano jupyter_notebook_config
c.NotebookApp.open_browser = False # changed to True
c.NotebookApp.allow_origin = '' # changed to '0.0.0.0' to allow all origins
c.NotebookApp.ip = '' # changed to '0.0.0.0' to listen on all IPs
c.NotebookApp.password_required = False # Unhashed this, hashed the password specification line above
c.NotebookApp.open_browser = True # Changed to False to prevent the automatic opening of an annoying frozen window

dig +short myip.opendns.com @resolver1.opendns.com # get my own public IP

jupyter notebook --ip 128.171.156.147 --port 8890 

###########################################
# Installing conda on the Gazelle

# Download the Python 2.7 64-Bit Command Line Installer (.sh extension) from https://www.anaconda.com/distribution/#download-section

cd /tmp

# Download the Anaconda link using curl. Note that I downloaded a MacOS link the first time...

curl -0 https://repo.anaconda.com/archive/Anaconda*.sh

# Verify the installer with the SHA-256 checksum

sha256sum Anaconda3-5.0.1-Linux-x86_64.sh

# Ensure the .sh is present in the file system
ls -lt 

# Install (keep the bash command)

bash Anaconda3-5.0.1-Linux-x86_64.sh

###########################################
https://jupyter.readthedocs.io/en/latest/running.html # running 

# Useful % operator specifications
%s - String (or any object with a string representation, like numbers)

%d - Integers

%f - Floating point numbers

%.<number of digits>f - Floating point numbers with a fixed amount of digits to the right of the dot.

%x/%X - Integers in hex representation (lowercase/uppercase)

###########################################
for x in range(10):
    # Check if x is even
    if x % 2 == 0:
        continue # this skips the current block, like "continue on and ignore this"
    print(x)
break # break is used to exit a for loop or a while loop
###########################################

def my_function_with_args(username, greeting):
    print("Hello, %s , From My Function!, I wish you %s"%(username, greeting))

my_function_with_args("John Doe", "a great year!")

###########################################
# HELP: Inside the () in a foreign function in ipynb, click Shift + Tab

!pwd # current wd

################## tmux ###################

tmux new # opens new tmux session
# All commands in tmux require the prefix shortcut, which by default is ctrl+b

ctrl+b tmux new -s [name of session] # start a new session with a specific name

ctrl+b # split pane horizontally: " ; vertically: %

ctrl+b [arrow key] # To move from pane to pane, simply use the prefix followed by the arrow key

ctrl+b d # This will detach the current session and return you to your normal shell.
exit # to close

 source-file "/.tmux-themepack/powerline/block/cyan.tmuxtheme"

############## Import csvs ################

# Import pandas as pd
import pandas as pd

# Import the cars.csv data: cars
cars = pd.read_csv('cars.csv')

# Print out cars
print(cars)

################ Open .nc #################

from pylab import *
import netCDF4

f = netCDF4.MFDataset('/usgs/data2/rsignell/models/ncep/narr/air.2m.1989.nc')
# print variables
f.variables.keys()

################ Install tarball ##########
# Open terminal
cd \Downloads
tar -xzvf seapy-0.2.1.tar.gz
cd seapy-0.2.1
python setup.py install
# I had to open setup.py in the seapy dir and #comment out the README line
# As of early 7/2018, there is an issue with the basemap dependency in matplot.lib that precludes proper local installation of seapy

############## seapy notes ################

# .rst files are ReStructuredText format. They look like text files, but can be rendered into HTML with the Python docutils package.

### seapy/seapy/model ###

grid = seapy.model.asgrid("grid_file.nc") # geared towards ROMS

# hycom.py has a lot of good example scripts showing how to import and manipulate HYCOM data for use in ROMS
# Same goes for soda.py (Simple Ocean Data Assimilation)- main vars include 3D Velocity, SST, Salinity, potential temperature, sea surface height, u, v current components, wind stress. Monthly timestep, 0.5 x 0.5 res (55,660 x 55,660 m)

### seapy/seapy/roms ###

# A CDL file is basically a text output from a netcdf file. If you want to know the contents of a netcdf file but don't have the time (or ability) to use programs built to read/write netcdf, you can use the simple text output of "ncdump" and then read/write it with a basic text editor.

seapy.roms.analysis.constant_depth(temp, grid, depth = 100) # interpolates everything to a certain depth (finds the nearest depth layer; may not be exact)

# Open ROMS info
grid = seapy.model.asgrid(roms_file.nc)
nc = seapy.netcdf(roms_file.nc)

# boundary.py:  Given a ROMS history, average, or climatology file, generate boundary conditions on the same grid.

# initial.py: generate initial conditions on the same grid.

#######################################################################
# notes from Udacity python course...

# if else statements

if season == 'spring':
    print('plant the garden!')
elif season == 'summer':
    print('water the garden!')
elif season == 'fall':
    print('harvest the garden!')
elif season == 'winter':
    print('stay indoors!')
else:
    print('unrecognized season')

# complex boolean

if (not unsubscribed) and (location == "USA" or location == "CAN"):
    print("send email")

# tag counter (HTML); also a multi-inclusive for loop
tokens = ['<greeting>', 'Hello World!', '</greeting>']

count = 0
for token in tokens:
    if token[0] == '<' and token[-1] == '>':
        count += 1

print(count)


# Adding print() debugging statements as a loop runs is helpful
# break terminates a loop
# continue skips a particular iteration; example below:

# skips an iteration when adding an item would exceed the limit
# breaks the loop if weight is exactly the value of the limit
print("\nMETHOD 2")
weight = 0
items = []
for cargo_name, cargo_weight in manifest:
    print("current weight: {}".format(weight))
    if weight >= 100:
        print("  breaking from the loop now!")
        break
    elif weight + cargo_weight > 100:
        print("  skipping {} ({})".format(cargo_name, cargo_weight))
        continue
    else:
        print("  adding {} ({})".format(cargo_name, cargo_weight))
        items.append(cargo_name)
        weight += cargo_weight

print("\nFinal Weight: {}".format(weight))
print("Final Items: {}".format(items))

# list comprehensions are a concise workaround vs. for loops
# python-specific
new_list = [expression for item in list]
squares = [x**2 for x in range(9) if x % 2 == 0 else x + 3]


# function definition

def function_name(input1, input2):
    defining_new_var
    return input1 * input2/new_var # return provides a value we can store and work with later

# if there is a common value for a variable, but we still want the function to be customizable, we can write (input 1 = 5). input will be evaluated as 5 unless specified otherwise.

############ 1/8: Notes on debugging bp_river.py ############

# Dale's river.py must be in the dir when bp_river.py is called, or the river module will not load successfully

# In DP's river.py, changed line 174: create_river to create_psource (based on https://github.com/powellb/seapy/blob/master/seapy/roms/ncgen.py)


    

